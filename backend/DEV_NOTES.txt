NEXT


BACK: Users Profile

- Implement Controller/Model/Resource: UserAddress   (2h) | TEST API  -

php artisan route:list


- IMPLEMENT FUNCTION ADD: UserProfile & UserAddress - 1h 20 min

        /*   DEBUG  */
        // dd($request->all());



###########################################################################33

BACK: Users Profile

- Implement Controller, Model, Resources (7h)#Implementing


-Planning  | - Modeling Database | Updated small changes in Design FRONTEND (30min)  -  48 min


php artisan make:controller API/UserProfileController --api

php artisan make:controller API/UserAddressController --api -crm


php artisan make:resource UserProfileResource

php artisan make:resource UsersResource

php artisan make:resource UsersAddressResource

###  Laravel Create Controller, Model and migration in one Artisan Command :

php artisan make:model UserProfile -crm

php artisan make:model UserAddress


TESTED API

#############################################################

BACKEND

- CREATE

APIs: USERS

php artisan make:controller API/UserController --api

php artisan make:resource UsersResource

git commit -m'Created: UserController, UsersResource, User Model | Updated: routes/api.php'

git push



#############################################################################


BACKEND


APIs: LESSONS & LEVELS - Implemented & Tested

-
POSTMAN : https://www.getpostman.com/collections/c4dd2e3df780552551e6


#############################################################################

BACKEND

- Routes -  Resources - Controllers - Models - Migrations

php artisan route:list


$ php artisan make:model GrammarTopic

Creating and updating the controller function
	1. Open your Terminal window and type the following command:

    php artisan make:controller API/EnglishController --api


Creating ratingResource
Now, let's create a new Resource, this time for ratings:
	1. Open your Terminal window and type the following command:

    php artisan make:resource UnitsResource



#############################################################################



####  PHP 7 CONFIGURATION ####

Tutorial: https://www.youtube.com/watch?v=SHOO2nGZrCY

###  C:\wamp64\bin\php\php7.0.23  ==> ORIGINAL

C:\wamp64\bin\php\php7.1.9


###  HOW TO INSTALL A SPECIFIC VERSION OF LARAVEL ###

composer create-project --prefer-dist laravel/laravel backend "5.6"

### TESTING DATABASE CONNECTION

DB name: lng_hand_full_stack

php artisan tinker
DB::connection()->getPdo();


######   Installing tymon-jwt-auth  #########

TUTORIAL: https://www.youtube.com/watch?v=xvrTlxfd3DU

Let's learn how to install and configure tymon/jwt-auth.
The installation process is pretty simple, but, as the tymon/jwt-auth library is in constant development, we should take some care related what the version we will use:

Open the project/composer.json file and add the following line of code, right after Laravel/Tinker:
"tymon/jwt-auth": "1.0.*"

Run:

composer update


Now, it is time to publish the vendor package. Still in your Terminal window and inside the Tinker console, type the following command:

php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"


Note that we are using Laravel 5.6 and jwt-auth 1.0, so we don't need to perform any additional actions to load JWT providers. The jwt-auth documents sometimes look like a mess and are very confusing, but don't worry, just follow our steps and you will be safe from mismatching documentation.
Let's generate the secret. Still in the Terminal window, type the following command:

 php artisan jwt:secret


The previous command will generate a secret key on your .env file, and will look something like the following line:
JWT_SECRET=McR1It4Bw9G8jU1b4XJhDMeZs4Q5Zwear
At this point, we have successfully installed jwt-auth, but we need to take some more steps to make our API secure.

##########################################################################################

###   LARAVEL CORS  - Setting up Laravel CORS

Laravel has excellent support for using CORS in its applications. Let's see how we can configure it using a library called barryvdh/laravel-cors:

	1. Inside the container's bash, type the following command:

 composer require barryvdh/laravel-cors


Thanks to the newest version of Laravel (5.6), our new library is already ready for use. Let's just make one more little change.
	1. Open the ./Server/app/Http/Kernel.php file and add the following code to the middlewareGroup API:
 protected $middlewareGroups = [
'web'  => [
                ...
        ],
        'api'  => [
                \Barryvdh\Cors\HandleCors::class,
                'throttle:60,1',
                'bindings',
        ],
It is very important to note that we added \Barryvdh\Cors\HandleCors :: class to the first line of dependencies in the API tag. This is very important because we avoid getting errors with status code 0 on our frontend application.
We are ready to go!






#############################################################################################

git checkout -b backend_2/Models-Migrations-Controllers-Routes

#############################################################################################

git checkout -b backend_3/Validation-Erros_Msg-Token-Resources

#############################################################################################

curl -X GET "http://localhost:8000/api/bikes/3" -H "accept: application/json" -H "X-CSRF-TOKEN: "

curl -X POST "http://localhost:8000/api/bikes/3" -H "accept: application/json" -H "X-CSRF-TOKEN: "

#############################################################################################

git checkout -b backend_4/Laravel-CORS

#############################################################################################
